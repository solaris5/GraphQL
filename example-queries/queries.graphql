# 1 Query: returns the complete component graph
query firstQuery {
  allDependencies {
    nodes {
      info: componentByDescendantId {
        id
        name
        license
        dependencies1: dependenciesByAncestorId(filter: {depth: {greaterThan: 0}}) {
          nodes {
            dependencies1: componentByDescendantId {
              id
              name
              license
            }
          }
        }
      }
    }
  }
}


# 2 Query: returns component with id= 3 and all of its dependencies
query secondeQuery{
  componentById(id:3){
     name
     dependencies:
      dependenciesByAncestorId {
        totalCount
      nodes{
      dependencies: componentByDescendantId{
            name
          }
        }
      
     }
  }
}
  
# 3 CRUD-Operation create
# Create component with id 11 and name "Comp Q"
mutation thirdQuery{
  createComponent(input:{component:{
  id:11,
  name:"Comp Q",license:"MIT",version:"1.0.0",package:"org.q"
}}){component{
    id
    name
    license
    version
    package
}}
  
 
createDependency(input:{dependency:{
  ancestorId:8,
  descendantId:11,
  depth:3
  linking:"DYNAMIC_LINKED"
}}){dependency{
  ancestorId
  descendantId
  depth
  linking
  
}}

createDependency(input:{dependency:{
  ancestorId:1,
  descendantId:11,
  depth:4
  linking:"DYNAMIC_LINKED"
}}){dependency{
  ancestorId
  descendantId
  depth
  linking
  
}}
}

# test thirdQuery
query resultCreate{
  componentById(id:11){
    name
    license
    package
    version
     dependencies1:dependenciesByAncestorId {
        totalCount
      nodes{
      dependencies: componentByDescendantId{
            name
          }
        }
      
      }
    dependencies2:dependenciesByDescendantId{
      totalCount
      nodes{
        componentByAncestorId{
          name
         license
         package
         version
        }
      }
    }
 
}
}

# Update-Operation: mutate component with id=11. Change the components name from 'Comp Q' to 'Comp X'
  mutation fourQuery{
  updateDependencyByAncestorIdAndDescendantId(
    input:{
    ancestorId:8
    dependencyPatch:{
      ancestorId:10
      descendantId:11
      depth:4
      linking:"DYNAMIC_LINKED"
    }
    
    }){
    dependency{
      componentByDescendantId{
        id
       name
      
      }}
  }
}



# Delete component with id =11 (Comp X)
# Before the component can be deleted all of its dependencies in the dependency table have to be deleted first.
mutation MyMutation {
  
  deleteDependencyByAncestorIdAndDescendantId(input: {ancestorId:8, descendantId: 11}) {
    componentByDescendantId {
      id
      license
      name
    }
  }
}

mutation MyMutation {
  
  deleteDependencyByAncestorIdAndDescendantId(input: {ancestorId:1, descendantId: 11}) {
    componentByDescendantId {
      id
      license
      name
    }
  }
}

mutation delete {
  deleteComponentById (input:{id:11}){
    component{id name}
  }
}

# test original component graph
query original {
  allComponents {
    nodes {
      id
      license
      name
    }
  }
}
